[build-system]
requires = [
    "setuptools>=61.2",
    "setuptools_scm[toml]>=7"
]
build-backend = "setuptools.build_meta"

[project]
name = "legend_pydataobj"
description = "LEGEND Python Data Objects"
authors = [
    { name = "The LEGEND Collaboration" },
]
maintainers = [
    { name = "The LEGEND Collaboration" },
]
readme = "README.md"
license.file = "LICENSE"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: MacOS",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
dependencies = [
    "awkward>=2",
    "awkward-pandas",
    "colorlog",
    "h5py>=3.10",
    "hdf5plugin",
    "hist",
    "numba!=0.53.*,!=0.54.*",
    "numexpr",
    "numpy>=1.21",
    "pandas>=1.4.4",
    "parse",
    "pint>0.24",
    "pint-pandas",
]
dynamic = [
    "version",
]

[project.urls]
Homepage = "https://github.com/legend-exp/legend-pydataobj"
"Bug Tracker" = "https://github.com/legend-exp/legend-pydataobj/issues"
Discussions = "https://github.com/legend-exp/legend-pydataobj/discussions"
Changelog = "https://github.com/legend-exp/legend-pydataobj/releases"

[tool.setuptools_scm]
write_to = "src/lgdo/_version.py"

[project.optional-dependencies]
all = [
    "legend-pydataobj[docs,test]",
]
docs = [
    "furo",
    "jupyter",
    "myst-parser",
    "nbsphinx",
    "sphinx",
    "sphinx-copybutton",
    "sphinx-inline-tabs",
]
test = [
    "pre-commit",
    "pylegendtestdata",
    "pytest>=6.0",
    "pytest-cov",
    "dbetto",
]

[project.scripts]
lh5ls = "lgdo.cli:lh5ls"
lh5concat = "lgdo.cli:lh5concat_cli"

[tool.setuptools]
include-package-data = true
zip-safe = false
license-files = [
    "LICENSE",
]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = [
    "src",
]
namespaces = false

[tool.coverage]
run.source = ["lgdo"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  #"G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  # "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "PT011",
  "RUF013",   # complains if you default to None for an asinine reason
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["lgdo._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
"docs/source/notebooks/*" = ["T201", "E402"]

[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error", 'ignore:\nPyarrow:DeprecationWarning']
log_cli_level = "INFO"
testpaths = "tests"

[tool.codespell]
ignore-words-list = "nd, unparseable, compiletime, crate"
